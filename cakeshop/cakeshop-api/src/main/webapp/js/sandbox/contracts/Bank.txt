pragma solidity ^0.4.9;
contract Owned {
  address owner;

  function Owned() { owner = msg.sender; }

  // This contract only defines a modifier but does not use it - it will
  // be used in derived contracts.
  // The function body is inserted where the special symbol "_" in the
  // definition of a modifier appears.
  modifier only_contract_owner { if (msg.sender == owner) _; }
}

contract Bank is Owned {

  bool enabled;

  struct Record {
    address owner;
    bytes32 id;
    uint value;
  }

  bytes32[] vault_ids;
  uint num_vault_ids;
  mapping (bytes32 => Record) vault;

  // only account owner or Bank owner is allowed
  modifier only_account_owner(bytes32 _id) { if (vault[_id].owner != 0 && (vault[_id].owner == msg.sender || msg.sender == owner)) _; }

  // Log Events
  event Deposit(address indexed _from, bytes32 indexed _id, uint _value, string status);
  event Withdraw(address indexed _from, bytes32 indexed _id, uint _amount, string status);
  event Debug(string msg);

  function Bank() {
    // Constructor
    enabled = false;
    num_vault_ids = 0;
  }

  function create_account(bytes32 _id) public {
    if (!enabled) {
      return;
    }
    if (vault[_id].owner == 0) {
      Debug("Initializing account");
      vault[_id].owner = msg.sender;
      vault[_id].id    = _id;
      vault[_id].value = 0;
      vault_ids.length = ++num_vault_ids; // grow the array
      vault_ids[num_vault_ids-1] = _id;
    }
  }

  // Public functions
  function deposit(bytes32 _id) only_account_owner(_id) public {
    if (!enabled) {
      Deposit(msg.sender, _id, msg.value, "fail; bank offline");
      return;
    }
    Debug("Adding value to account");
    Deposit(msg.sender, _id, msg.value, "success");
    vault[_id].value += msg.value;
  }

  function withdraw(bytes32 _id,  uint _amount) only_account_owner(_id) public {
    if (!enabled) {
      Withdraw(msg.sender, _id, _amount, "fail; bank offline");
      return;
    }
    if (vault[_id].value >= _amount) {
      Withdraw(msg.sender, _id, _amount, "success");
      vault[_id].value -= _amount;
      msg.sender.send(_amount);
    }
  }

  function get_balance(bytes32 _id) only_account_owner(_id) public returns (uint bal) {
    if (!enabled && msg.sender != owner) {
      // only allow the Bank Contract owner to retrieve a balance when disabled
      return;
    }
    if (vault[_id].owner != 0) {
      return vault[_id].value;
    }
    return 0;
  }

  // Toggles
  function enable() only_contract_owner public {
    enabled = true;
  }

  function disable() only_contract_owner public {
    enabled = false;
  }

  function is_enabled() constant public returns (bool isEnabled) {
    return enabled;
  }

  // Killswitch

  // Transfer storage to new contract and then suicide
  function kill(Bank _new_contract) only_contract_owner public {
    disable();
    _new_contract.copy_vault(this);
    suicide(_new_contract);
  }


  // #######################
  // # Vault introspection #
  // #######################


  string public LOG;

  function get_id_count() public returns(uint r_id_count) {
    return num_vault_ids;
  }

  function iter_next_id(uint _pos) public returns (bytes32 _id) {
    _id = vault_ids[_pos];
  }

  function get_ids() public returns(bytes32[] r_ids) {
    return vault_ids;
  }

  function get_record(bytes32 _id) public returns(address r_owner, bytes32 r_id, uint r_value) {
    // TODO need to add an appropriate check here
    //      e.g., check if the msg.sender is a new bank, and not an account, etc
    //if (!enabled && msg.sender != owner) {
    //  // only allow the Bank Contract owner to retrieve a balance when disabled
    //  return;
    //}

    if (vault[_id].owner != 0) {
      r_owner = vault[_id].owner;
      r_id    = vault[_id].id;
      r_value = vault[_id].value;
    }
  }

  function get_record_owner(bytes32 _id) public returns(address r_owner) {
    if (vault[_id].owner != 0) {
      r_owner = vault[_id].owner;
    }
  }

  function get_record_value(bytes32 _id) public returns(uint r_value) {
    if (vault[_id].owner != 0) {
      r_value = vault[_id].value;
    }
  }

  // :107:43: Type error: Internal type is not allowed for public and external functions.
  // Can't use our struct as a param in external functions, so instead we have serialize our data some how
  //function transfer_vault(address _owner, VaultTransfer _vt) public {

  function copy_vault(address _other_bank_address) public {
    // TODO auth check
    //if (owner == _owner) {
    //  Debug("transferred vault data from old contract");
    //}

    Bank _other_bank = Bank(_other_bank_address);

    uint id_count = _other_bank.get_id_count();

    // THE FOLLOWING DOES NOT WORK! CANNOT DYNAMICALLY RESIZE ARRAYS "IN MEMORY"
    //bytes32[id_count] _ids;
    //bytes32[] _ids;
    //_ids.length = 1;
    //_ids.length = id_count;
    //return;

    for(var i = 0; i < id_count; i++) {
      //uint i = 0;
      var _id = _other_bank.iter_next_id(i);
      //_ids[i] = _id;

      vault[_id].id    = _id;
      vault[_id].owner = _other_bank.get_record_owner(_id);
      vault[_id].value = _other_bank.get_record_value(_id);
    }

  }

}
