/**
This is registration and maintenance part of data feeds into a smart contract
(commonly called oracles).

Sample usage via geth console:

// Handle on the contract
r = Registrat0r.ABI.contractAt(registryAddress)

// Register a new oracle provider, in this case, equity feed for JPM
r.register('EQUITY_JPM', 0x6428291086c88d6d73b874cd631896fbe90e42eb, "[ABI]", {
  from: eth.coinbase,
  to: registryAddress,
  gas: 1000000
})

// Look up an oracle by feed name
r.providers('EQUITY_JPM')[0]

// Replace oracle provider with a new one
r.replace_oracle('EQUITY_JPM', 0x6565e77ecbf9c49d591f4c5682c2b9a4c12fd69d, "[ABI]", {
  from: eth.coinbase,
  to: registryAddress,
  gas: 1000000
})
*/

pragma solidity ^0.4.9;
// ############## REGISTRY START ##############
contract Registrat0r {
  // This is first SDK account
  address owner = 0x2e219248f44546d966808cdd20cb6c36df6efa82;

  mapping (address => bool) admins;

  struct Oracle {
    address owner;
    address addy;
    bytes32 name;

    string last_update;    // timestamp?
    bool exists;
    uint added_on_block;
    uint updated_on_block;

    string abi;
  }

  mapping (bytes32 => Oracle) public providers;
  mapping (address => bytes32) public names;

  string public LOG;

  // modifiers
  modifier admin_only { if (admins[msg.sender] == true) _ }

  // constructor
  function Registrat0r() {
    admins[owner] = true;
  }

  function addOwner(address addy) admin_only {
    admins[addy] = true;
  }

  function kill() {
    if (msg.sender == owner)
      suicide(owner);
  }

  // should probably add removing an owner

  function replace_oracle(bytes32 name, address a, string abi) admin_only {
    Oracle feed = providers[name];

    feed.owner = msg.sender;
    feed.name = name;
    feed.addy = a;
    feed.abi = abi;
    feed.exists = true;
    feed.added_on_block = block.number;
    feed.updated_on_block = block.number;

    names[a] = name;
    providers[name] = feed;
  }

  function register(bytes32 name, address a, string abi) {
    Oracle feed = providers[name];

    if (!feed.exists) {
      feed.owner = msg.sender;
      feed.name = name;
      feed.addy = a;
      feed.abi = abi;
      feed.exists = true;
      feed.added_on_block = block.number;
      feed.updated_on_block = block.number;

      names[a] = name;
      providers[name] = feed;
    } else {
      if (feed.owner == msg.sender) {
        feed.updated_on_block = block.number;
      }
    }
  }

  function getOracleAddress(bytes32 name) returns (address) {
    Oracle o = providers[name];

    return o.addy;
  }

  function isOracleStale(bytes32 name, uint256 count) returns (bool) {
    Oracle o = providers[name];

    if (o.updated_on_block >= (block.number - count) ) {
      return false;
    } else {
      return true;
    }
  }

  function getOracleAbi(bytes32 name) returns (string) {
    Oracle o = providers[name];

    return o.abi;
  }
}

// ############## REGISTRY END ##############



/**
This is an oracle provider stub used to link registry above with both consumer
examples below.
*/

// ############## STUB START ##############
contract RegistratorStub {
  function register(bytes32 name, address a, string abi) {}
  function getOracleAddress(bytes32 name) returns (address) {}
  function isOracleStale(bytes32 name, uint256 count) returns (bool) {}
}

// ############## STUB END ##############



/**
This is a sample data provider (oracle) that registers in the registry and feeds
external data into ethereum. In this case,
*/

// ############## ORACLE START ##############
contract EQUITY_JPM {
  address owner;

  string public symbol;
  int public last;
  int public change;
  bytes32 public last_update;
  uint256 public update_block;

  // NEEDS TO BE SET FROM THE PREVIOUSLY REGISTERED CONTRACT
  address register_addy = 0xb5a9b9f2bf9df2a58ab8120d6a868cdfce4152d9;
  string abi = '[{"constant":true,"inputs":[],"name":"change","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"update_block","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"last_update","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[],"name":"last","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"v","type":"int256"},{"name":"c","type":"int256"},{"name":"up","type":"bytes32"}],"name":"update","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"}]';

  function EQUITY_JPM() {
    RegistratorStub reg = RegistratorStub(register_addy);
    reg.register("EQUITY_JPM", this, abi);

    symbol = "GOOG";
    last = 631;
    change = 0;
  }

  function update(int v, int c, bytes32 up) {
    last = v;
    change = c;
    last_update = up;
    update_block = block.number;

    // should update the register that I've been updated
    RegistratorStub reg = RegistratorStub(register_addy);
    reg.register("EQUITY_JPM", this, abi);
  }
}

// ############## ORACLE END ##############



/**
Finally, this is an example of a "consumer contract" that fetches the data
provider from registry, and then asks the oracle for the latest information.
*/

// ############## CONSUMER START ##############
contract EQUITY {
  function last() returns (int256) {}
  function symbol() returns (bytes32) {}
}

contract picky_consumer {
  string public LOG;
  bytes32 public symbol;
  int256 public price;

  // NEEDS TO BE SET FROM THE PREVIOUSLY REGISTERED CONTRACT
  address register_addy = 0xb5a9b9f2bf9df2a58ab8120d6a868cdfce4152d9;

  function picky_consumer() { }

  function buy_maybe(bytes32 stock, uint256 blocks) {
    RegistratorStub reg = RegistratorStub(register_addy);

    if ( reg.isOracleStale(stock, blocks) ) {
      // STALE
      LOG = 'Oracle is stale, not buying anything';
    } else {
      EQUITY jpm = EQUITY(reg.getOracleAddress(stock));

      LOG = 'Oracle is fresh, check oracle value';
      price = jpm.last();
      symbol = jpm.symbol();
    }
    //EQUITY goog = EQUITY(reg.getOracleAddress(stock));
  }
}

// ############## CONSUMER END ##############
