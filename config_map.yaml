apiVersion: v1
data:
  application.properties: |
    #Sat May 12 18:34:56 CST 2018
    cakeshop.database.vendor=hsqldb
    cakeshop.hibernate.hbm2ddl.auto=update
    cakeshop.hibernate.jdbc.batch_size=20
    cakeshop.jdbc.pass=sdk
    cakeshop.jdbc.user=sdk
    cakeshop.mvc.async.pool.queue.max=2000
    cakeshop.mvc.async.pool.threads.core=250
    cakeshop.mvc.async.pool.threads.max=1000
    contract.poll.delay.millis=5000
    contract.registry.addr=
    endpoints.actuator.enabled=true
    geth.auto.start=false
    geth.auto.stop=false
    geth.cors.enabled=false
    geth.cors.url=
    geth.datadir=/Users/pengshengmao/Desktop/quorum-examples/data/local/ethereum
    geth.db.enabled=true
    geth.identity=wahaha
    geth.log=/logs
    geth.mining=true
    geth.networkid=1006
    geth.node.port=30303
    geth.params.extra=
    geth.rpcapi.list=admin,db,eth,debug,miner,net,shh,txpool,personal,web3
    geth.url=http\:104.198.78.243\:22000
    geth.verbosity=
    management.context-path=/manage
    server.compression.enabled=true
    server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
    spring.main.banner-mode=off
    spring.mvc.view.prefix=/WEB-INF/jsp/
    spring.mvc.view.suffix=.jsp
  genesis.json: |
    {
      "alloc": {},
      "coinbase": "0x0000000000000000000000000000000000000000",
      "config": {
        "homesteadBlock": 0,
        "chainId": 1,
        "eip155Block": null,
        "eip158Block": null,
        "isQuorum": true
      },
      "difficulty": "0x0",
      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0xE0000000",
      "mixhash": "0x00000000000000000000000000000000000000647572616c65787365646c6578",
      "nonce": "0x0",
      "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "timestamp": "0x00"
    }
  passwords.txt: ""
  permissioned-nodes.json: |
    [
    "enode://e34703bb5f6a3b82a17edc3ec1c77f8dab8eb64b9f2e4e0431cef630880a9cdf97d31977e0d29991fbc8e9392d5f5626ec9502866a9a95591d77f0025e70391f@104.198.78.243:21000?discport=0&raftport=50400",
    "enode://4a54e60e5edba14afe3f0a2a4585385c23b978f223f764d2c4d4fc2e827a7d4d2f7c03f3dafb8160dfe6b44a559b588ed84b4a6f626351ee7d03326c5b99bdd4@104.154.211.31:21000?discport=0&raftport=50400"
    ]
  raft-init.sh: |-
    #!/bin/bash
    set -u
    set -e

    echo "[*] Cleaning up temporary data directories"
    rm -rf qdata
    mkdir -p qdata/logs

    echo "[*] Configuring node"
    mkdir -p qdata/dd/{keystore,geth}
    cp permissioned-nodes.json qdata/dd/static-nodes.json
    cp permissioned-nodes.json qdata/dd/
    cp key qdata/dd/keystore
    cp nodekey qdata/dd/geth/nodekey
    geth --datadir qdata/dd init genesis.json
  raft-start.sh: |-
    #!/bin/bash
    set -u
    set -e

    mkdir -p qdata/logs
    echo "[*] Starting Constellation Node"
    ./constellation-start.sh

    echo "[*] Starting Ethereum Node"
    ARGS="--raft --rpc --rpcaddr 0.0.0.0 --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum --emitcheckpoints"
    PRIVATE_CONFIG=qdata/c/tm.ipc nohup geth --datadir qdata/dd $ARGS --permissioned --raftport 50400 --rpcport 22000 --port 21000 --unlock 0 --password passwords.txt 2>>qdata/logs/log.log &
    echo "Node configured. See 'qdata/logs' for logs, and run e.g. "geth attach qdata/dd/geth.ipc" to attach to the Geth node."
  runscript.sh: |
    #!/bin/bash
    PRIVATE_CONFIG=qdata/c/tm.ipc geth --exec "loadScript(\"$1\")" attach ipc:qdata/dd/geth.ipc
  script.js: "a = eth.accounts[0]\nweb3.eth.defaultAccount = a;\n\n// abi and bytecode
    generated from simplestorage.sol:\n// > solcjs --bin --abi simplestorage.sol\nvar
    abi = [{\"constant\":true,\"inputs\":[],\"name\":\"storedData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"name\":\"retVal\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initVal\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"}];\n\nvar
    bytecode = \"0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029\";\n\nvar
    simpleContract = web3.eth.contract(abi);\nvar simple = simpleContract.new(42,
    {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract)
    {\n\tif (e) {\n\t\tconsole.log(\"err creating contract\", e);\n\t} else {\n\t\tif
    (!contract.address) {\n\t\t\tconsole.log(\"Contract transaction send: TransactionHash:
    \" + contract.transactionHash + \" waiting to be mined...\");\n\t\t} else {\n\t\t\tconsole.log(\"Contract
    mined! Address: \" + contract.address);\n\t\t\tconsole.log(contract);\n\t\t}\n\t}\n});\n"
  stop.sh: |-
    #!/bin/bash
    killall geth bootnode constellation-node
kind: ConfigMap
metadata:
  creationTimestamp: 2018-05-19T18:38:45Z
  name: 7node-map
  namespace: default
  resourceVersion: "514714"
  selfLink: /api/v1/namespaces/default/configmaps/7node-map
  uid: dc7385ba-5b93-11e8-8367-42010a80014e